package com.ibm.baw.custom.ssl;

import javax.net.ssl.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.KeyStore;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomSSLHttpClient {

    private static SSLContext sslContext = null;

    // Custom response class to hold both body and headers
    public static class HttpResponse {
        private String responseBody;
        private Map<String, List<String>> responseHeaders;

        public HttpResponse(String responseBody, Map<String, List<String>> responseHeaders) {
            this.responseBody = responseBody;
            this.responseHeaders = responseHeaders;
        }

        public String getResponseBody() {
            return responseBody;
        }

        public Map<String, List<String>> getResponseHeaders() {
            return responseHeaders;
        }
    }

    // Load or refresh SSL context
    private static SSLContext getSSLContext() throws Exception {
        if (sslContext == null) {
            // Set up the KeyStore
            KeyStore keyStore = KeyStore.getInstance("JKS");
            try (var keyStoreStream = CustomSSLHttpClient.class.getResourceAsStream("/path/to/keystore.jks")) {
                keyStore.load(keyStoreStream, "keystorePassword".toCharArray());
            }

            // Initialize TrustManager with the KeyStore
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(keyStore);

            // Create SSL context with KeyStore and TrustManager
            sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustManagerFactory.getTrustManagers(), new java.security.SecureRandom());
        }
        return sslContext;
    }

    // Method to clear the SSL context so that the next request recreates it
    public static void clearSSLContext() {
        sslContext = null;
    }

    // Method to perform HTTP requests with custom SSL context
    public static HttpResponse sendRequest(String method, String url, String requestBody) throws Exception {
        SSLContext sslContext = getSSLContext();

        // Open a connection to the provided URL
        URL requestUrl = new URL(url);
        HttpsURLConnection connection = (HttpsURLConnection) requestUrl.openConnection();

        // Set custom SSL context for secure connection
        connection.setSSLSocketFactory(sslContext.getSocketFactory());
        connection.setRequestMethod(method);

        // If requestBody is not null, we are doing a POST/PUT request
        if (requestBody != null && (method.equals("POST") || method.equals("PUT"))) {
            connection.setDoOutput(true);
            try (var outputStream = connection.getOutputStream()) {
                outputStream.write(requestBody.getBytes("UTF-8"));
                outputStream.flush();
            }
        }

        // Read response from server
        BufferedReader reader;
        if (connection.getResponseCode() >= 200 && connection.getResponseCode() < 300) {
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        } else {
            reader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
        }
        StringBuilder responseBody = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            responseBody.append(line);
        }
        reader.close();

        // Capture response headers
        Map<String, List<String>> responseHeaders = new HashMap<>(connection.getHeaderFields());

        // Return both body and headers in the custom HttpResponse object
        return new HttpResponse(responseBody.toString(), responseHeaders);
    }
}
